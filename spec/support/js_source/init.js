// Generated by CoffeeScript 2.2.2
var DICTIONARY_MATCHERS, GRAPHS, KEYBOARD_AVERAGE_DEGREE, KEYBOARD_STARTING_POSITIONS, KEYPAD_AVERAGE_DEGREE, KEYPAD_STARTING_POSITIONS, MATCHERS, calc_average_degree, k, ranked_user_inputs_dict, time, v, zxcvbn;

ranked_user_inputs_dict = {};

// initialize matcher lists
DICTIONARY_MATCHERS = [build_dict_matcher('passwords', build_ranked_dict(passwords)), build_dict_matcher('english', build_ranked_dict(english)), build_dict_matcher('male_names', build_ranked_dict(male_names)), build_dict_matcher('female_names', build_ranked_dict(female_names)), build_dict_matcher('surnames', build_ranked_dict(surnames)), build_dict_matcher('user_inputs', ranked_user_inputs_dict)];

MATCHERS = DICTIONARY_MATCHERS.concat([l33t_match, digits_match, year_match, date_match, repeat_match, sequence_match, spatial_match]);

GRAPHS = {
  'qwerty': qwerty,
  'dvorak': dvorak,
  'keypad': keypad,
  'mac_keypad': mac_keypad
};

// on qwerty, 'g' has degree 6, being adjacent to 'ftyhbv'. '\' has degree 1.
// this calculates the average over all keys.
calc_average_degree = function(graph) {
  var average, k, key, n, neighbors, v;
  average = 0;
  for (key in graph) {
    neighbors = graph[key];
    average += ((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = neighbors.length; j < len; j++) {
        n = neighbors[j];
        if (n) {
          results.push(n);
        }
      }
      return results;
    })()).length;
  }
  average /= ((function() {
    var results;
    results = [];
    for (k in graph) {
      v = graph[k];
      results.push(k);
    }
    return results;
  })()).length;
  return average;
};

KEYBOARD_AVERAGE_DEGREE = calc_average_degree(qwerty);

KEYPAD_AVERAGE_DEGREE = calc_average_degree(keypad); // slightly different for keypad/mac keypad, but close enough

KEYBOARD_STARTING_POSITIONS = ((function() {
  var results;
  results = [];
  for (k in qwerty) {
    v = qwerty[k];
    results.push(k);
  }
  return results;
})()).length;

KEYPAD_STARTING_POSITIONS = ((function() {
  var results;
  results = [];
  for (k in keypad) {
    v = keypad[k];
    results.push(k);
  }
  return results;
})()).length;

time = function() {
  return (new Date()).getTime();
};

// now that frequency lists are loaded, replace zxcvbn stub function.
zxcvbn = function(password, user_inputs) {
  var i, j, matches, ref, result, start;
  start = time();
  if (user_inputs != null) {
    for (i = j = 0, ref = user_inputs.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      // update ranked_user_inputs_dict.
      // i+1 instead of i b/c rank starts at 1.
      ranked_user_inputs_dict[user_inputs[i]] = i + 1;
    }
  }
  matches = omnimatch(password);
  result = minimum_entropy_match_sequence(password, matches);
  result.calc_time = time() - start;
  return result;
};

// make zxcvbn function globally available
// via window or exports object, depending on the environment
if (typeof window !== "undefined" && window !== null) {
  window.zxcvbn = zxcvbn;
  if (typeof window.zxcvbn_load_hook === "function") {
    window.zxcvbn_load_hook();
  }
} else if (typeof exports !== "undefined" && exports !== null) {
  exports.zxcvbn = zxcvbn;
}
